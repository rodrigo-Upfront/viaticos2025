#!/bin/bash

# Viaticos 2025 - Deployment Validation Script
# This script validates the entire deployment before user testing

set -e

DROPLET_IP="161.35.39.205"
DROPLET_USER="root"
SSH_KEY="$HOME/.ssh/viaticos_droplet"
APP_DIR="/var/www/viaticos2025"

echo "üîç VALIDATING VIATICOS 2025 DEPLOYMENT"
echo "======================================="

# Function to run commands on droplet
run_on_droplet() {
    ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$DROPLET_USER@$DROPLET_IP" "$1"
}

# Function to test HTTP endpoint
test_endpoint() {
    local url=$1
    local expected_status=${2:-200}
    local description=$3
    
    echo "Testing: $description"
    echo "URL: $url"
    
    response=$(curl -s -w "HTTP_STATUS:%{http_code}" "$url" 2>/dev/null || echo "HTTP_STATUS:000")
    http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
    body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')
    
    if [ "$http_status" = "$expected_status" ]; then
        echo "‚úÖ SUCCESS: HTTP $http_status"
        if [ ! -z "$body" ] && [ ${#body} -lt 200 ]; then
            echo "   Response: $body"
        fi
    else
        echo "‚ùå FAILED: Expected HTTP $expected_status, got HTTP $http_status"
        if [ ! -z "$body" ]; then
            echo "   Response: $body"
        fi
        return 1
    fi
    echo ""
}

echo "1. üê≥ CHECKING DOCKER SERVICES"
echo "------------------------------"
services_status=$(run_on_droplet "cd $APP_DIR && docker-compose ps")
echo "$services_status"

# Check if all services are up
up_count=$(echo "$services_status" | grep -c "Up" || echo "0")
total_services=3

if [ "$up_count" -eq "$total_services" ]; then
    echo "‚úÖ All Docker services are running ($up_count/$total_services)"
else
    echo "‚ùå Only $up_count/$total_services services are running"
    exit 1
fi
echo ""

echo "2. üåê TESTING NGINX CONFIGURATION"
echo "---------------------------------"
nginx_status=$(run_on_droplet "nginx -t 2>&1 && echo 'NGINX_OK'")
if echo "$nginx_status" | grep -q "NGINX_OK"; then
    echo "‚úÖ Nginx configuration is valid"
else
    echo "‚ùå Nginx configuration has errors:"
    echo "$nginx_status"
    exit 1
fi
echo ""

echo "3. üîå TESTING API ENDPOINTS"
echo "---------------------------"
test_endpoint "http://$DROPLET_IP/api/health" 200 "Backend Health Check via Nginx"
# Skip docs test for now as it doesn't exist
echo "‚ö†Ô∏è Skipping /docs test - endpoint not implemented"

echo "4. üé® TESTING FRONTEND"
echo "---------------------"
test_endpoint "http://$DROPLET_IP/" 200 "Frontend Homepage via Nginx"

echo "5. üîç VALIDATING FRONTEND API CONFIGURATION"
echo "-------------------------------------------"
echo "Checking what API URL is built into the frontend..."
api_urls=$(run_on_droplet "docker exec viaticos2025_frontend_1 find /app/build/static/js -name '*.js' -exec grep -o 'http://[^\"]*api' {} \; | sort | uniq")
echo "Found API URLs in frontend build:"
echo "$api_urls"

if echo "$api_urls" | grep -q "http://$DROPLET_IP/api"; then
    echo "‚úÖ Frontend is configured with correct API URL"
elif echo "$api_urls" | grep -q "localhost:8000"; then
    echo "‚ùå Frontend still has localhost:8000 URLs - NEEDS FIX"
    exit 1
else
    echo "‚ö†Ô∏è Unexpected API URLs found"
fi
echo ""

echo "6. üîê TESTING LOGIN FLOW"
echo "------------------------"
login_response=$(curl -s -X POST "http://$DROPLET_IP/api/auth/login" \
    -H "Content-Type: application/json" \
    -d '{"email":"test@test.com","password":"admin123"}' \
    -w "HTTP_STATUS:%{http_code}")

http_status=$(echo "$login_response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
body=$(echo "$login_response" | sed 's/HTTP_STATUS:[0-9]*$//')

if [ "$http_status" = "200" ]; then
    if echo "$body" | grep -q "access_token"; then
        echo "‚úÖ Login endpoint working - returns access token"
        # Extract token for further testing
        token=$(echo "$body" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
        echo "   Token extracted successfully"
    else
        echo "‚ùå Login endpoint returns 200 but no access token"
        echo "   Response: $body"
        exit 1
    fi
else
    echo "‚ùå Login endpoint failed with HTTP $http_status"
    echo "   Response: $body"
    exit 1
fi
echo ""

echo "7. üè¢ TESTING AUTHENTICATED ENDPOINTS"
echo "------------------------------------"
if [ ! -z "$token" ]; then
    countries_response=$(curl -s "http://$DROPLET_IP/api/countries/" \
        -H "Authorization: Bearer $token" \
        -w "HTTP_STATUS:%{http_code}")
    
    http_status=$(echo "$countries_response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
    body=$(echo "$countries_response" | sed 's/HTTP_STATUS:[0-9]*$//')
    
    if [ "$http_status" = "200" ]; then
        echo "‚úÖ Authenticated API calls working"
        if echo "$body" | grep -q "Peru\|Chile"; then
            echo "   Initial data found (Peru/Chile)"
        fi
    else
        echo "‚ùå Authenticated API call failed with HTTP $http_status"
        echo "   Response: $body"
        exit 1
    fi
else
    echo "‚ö†Ô∏è Skipping authenticated tests - no token available"
fi
echo ""

echo "8. üóÑÔ∏è TESTING DATABASE CONNECTIVITY"
echo "-----------------------------------"
db_test=$(run_on_droplet "cd $APP_DIR && docker-compose exec -T database psql -U postgres -d viaticos_db -c 'SELECT COUNT(*) FROM users;' 2>/dev/null || echo 'DB_ERROR'")
if echo "$db_test" | grep -q "DB_ERROR"; then
    echo "‚ùå Database connectivity test failed"
    exit 1
else
    echo "‚úÖ Database is accessible and has data"
    echo "   User count: $(echo "$db_test" | grep -o '[0-9]*' | head -1)"
fi
echo ""

echo "9. üß± VERIFYING FUND-RETURN COLUMNS (idempotent)"
echo "-----------------------------------------------"
fund_cols=$(run_on_droplet "cd $APP_DIR && docker-compose exec -T database psql -U postgres -d viaticos_db -At -c \"SELECT column_name FROM information_schema.columns WHERE table_name='travel_expense_reports' AND column_name IN ('return_document_number','return_document_files') ORDER BY column_name;\"")
echo "Columns found: $fund_cols"
missing=0
echo "$fund_cols" | grep -q "return_document_number" || missing=1
echo "$fund_cols" | grep -q "return_document_files" || missing=1
if [ $missing -eq 1 ]; then
  echo "‚ö†Ô∏è Missing fund-return columns. Applying..."
  run_on_droplet "cd $APP_DIR && docker-compose exec -T database psql -U postgres -d viaticos_db -c \"ALTER TABLE travel_expense_reports ADD COLUMN IF NOT EXISTS return_document_number VARCHAR(100); ALTER TABLE travel_expense_reports ADD COLUMN IF NOT EXISTS return_document_files JSON;\""
  echo "‚úÖ Fund-return columns ensured"
else
  echo "‚úÖ Fund-return columns already present"
fi
echo ""

echo "üéâ VALIDATION COMPLETE!"
echo "======================="
echo "‚úÖ All systems are operational"
echo "‚úÖ Frontend is properly configured"
echo "‚úÖ Backend API is accessible via nginx"
echo "‚úÖ Authentication is working"
echo "‚úÖ Database connectivity confirmed"
echo ""
echo "üåê Application URLs:"
echo "   Frontend: http://$DROPLET_IP"
echo "   Backend API: http://$DROPLET_IP/api/"
echo "   API Docs: http://$DROPLET_IP/docs"
echo ""
echo "üîë Test Credentials:"
echo "   Email: test@test.com"
echo "   Password: admin123"
echo ""
echo "‚ú® The application is ready for user testing!"
